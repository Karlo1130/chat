services:
  api:
    build:
      context: .
      dockerfile: backend/Dockerfile.api
    ports:
      - "3000:3000"
    environment:
      - ADMIN_PASSWORD=kalsierk
      - ADMIN_NAME=karlod1130
      - URL=mongodb://mongo1:27017,mongo2:27017,mongo3:27017/chat?replicaSet=rs0
    networks:
      - chat-net

  frontend:
    build:
      context: .
      dockerfile: public/Dockerfile.fe
    ports:
      - "80:80"
    networks:
      - chat-net

  sync:
    build: 
      context: .
      dockerfile: sync/Dockerfile.sy
    container_name: sync
    environment:
      - URL=mongodb://mongo1:27017,mongo2:27017,mongo3:27017/chat?replicaSet=rs0
      - NODE_ID=node1
      - ADMIN_PASSWORD=kalsierk
      - ADMIN_NAME=karlod1130
    ports:
      - "4000:4000"
    networks:
      - chat-net
    depends_on:
      - mongo1
      - mongo2
      - mongo3

  mongo1:
    image: mongo
    container_name: mongo1
    ports:
      - 27017:27017
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    networks:
      - chat-net

  mongo2:
    image: mongo
    container_name: mongo2
    ports:
      - 27018:27017
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    networks:
      - chat-net

  mongo3:
    image: mongo
    container_name: mongo3
    ports:
      - 27019:27017
    command: ["mongod", "--replSet", "rs0", "--bind_ip_all"]
    networks:
      - chat-net

  mongo-init:
    image: mongo
    container_name: mongo-init
    depends_on:
      mongo1:
        condition: service_started
      mongo2:
        condition: service_started
      mongo3:
        condition: service_started
    command: >
      mongosh --host mongo1 --eval "
        rs.initiate({
          _id: 'rs0',
          members: [
            {_id: 0, host: 'mongo1:27017'},
            {_id: 1, host: 'mongo2:27017'},
            {_id: 2, host: 'mongo3:27017'}
          ]
        })
      "
    networks:
      - chat-net
    restart: on-failure

networks:
  chat-net:
    driver: bridge
